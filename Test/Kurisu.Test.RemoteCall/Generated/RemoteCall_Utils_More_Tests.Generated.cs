// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using Kurisu.RemoteCall.Utils;
using Kurisu.RemoteCall;
using Kurisu.RemoteCall.Abstractions;
using Kurisu.RemoteCall.Attributes;
using Kurisu.RemoteCall.Attributes.HelpMethods;
using Newtonsoft.Json.Linq;
using Xunit;

namespace Kurisu.Test.RemoteCall.Generated
{
    public class RemoteCall_Utils_More_Tests
    {
        private readonly IJsonSerializer _jsonSerializer = new NewtonsoftJsonSerializer();
        private readonly CommonUtils _commonUtils;

        public RemoteCall_Utils_More_Tests()
        {
            _commonUtils = new CommonUtils(_jsonSerializer);
        }

        [Fact]
        public void CommonUtils_IsReferenceType_Works()
        {
            Assert.True(_commonUtils.IsReferenceType(typeof(object)));
            Assert.False(_commonUtils.IsReferenceType(typeof(string)));
            Assert.True(_commonUtils.IsReferenceType(typeof(int[])));
        }

        [Fact]
        public void ToObjDictionary_SimpleTypeWithPrefix_Succeeds()
        {
            var d = _commonUtils.ToObjDictionary("p", 42);
            Assert.Equal("42", d["p"].ToString());
        }

        [Fact]
        public void ToObjDictionary_EmptyEnumerable_SetsPrefixToNull()
        {
            var empty = new List<int>();
            var d = _commonUtils.ToObjDictionary("e", empty);
            Assert.True(d.ContainsKey("e"));
            Assert.Null(d["e"]);
        }

        [Fact]
        public async System.Threading.Tasks.Task HttpContentUtils_Create_Serializes_NonString_ToJson()
        {
            var method = typeof(FakePost2).GetMethod(nameof(FakePost2.PostObject));
            var p = new List<ParameterValue> { new ParameterValue(method.GetParameters()[0], new { x = 9 }) };
            var content = HttpContentUtils.Create(method, p, _jsonSerializer, _commonUtils);
            var s = await content.ReadAsStringAsync();
            Assert.Contains("\"x\":9", s);
        }

        [Fact]
        public async System.Threading.Tasks.Task HttpContentUtils_Create_AsUrlencoded_MultipleParams_MergeKeys()
        {
            var method = typeof(FakePost2).GetMethod(nameof(FakePost2.PostMulti));
            var p = new List<ParameterValue>
            {
                new ParameterValue(method.GetParameters()[0], new { a = 1 }),
                new ParameterValue(method.GetParameters()[1], new { a = 2, b = 3 })
            };
            var content = HttpContentUtils.Create(method, p, _jsonSerializer, _commonUtils);
            var s = await content.ReadAsStringAsync();
            // later parameter should overwrite earlier key 'a'
            Assert.Contains("a=2", s);
            Assert.Contains("b=3", s);
        }

        [Fact]
        public void TypeExtensions_IsInheritedFrom_Works()
        {
            Assert.True(typeof(List<int>).IsInheritedFrom<IEnumerable<int>>());
            Assert.False(typeof(string).IsInheritedFrom<IEnumerable<int>>());
        }

        [Fact]
        public void HandlerCache_CanStoreAndRetrieve()
        {
            var mi = typeof(FakePost2).GetMethod(nameof(FakePost2.PostObject));
            var key = (typeof(FakePost2), "k", "v");
            Kurisu.RemoteCall.Utils.HandlerCache.Methods[key] = mi;
            Assert.True(Kurisu.RemoteCall.Utils.HandlerCache.Methods.TryGetValue(key, out var got));
            Assert.Equal(mi, got);
        }

        private class FakePost2
        {
            [Post("u")] public void PostObject(object o) { }
            [Post("u", asUrlencodedFormat: true)] public void PostMulti(object p1, object p2) { }
        }
    }
}
