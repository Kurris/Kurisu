// <auto-generated />
using System;
using Microsoft.Extensions.DependencyInjection;
using Kurisu.RemoteCall.Attributes;
using Kurisu.RemoteCall.Attributes.HelpMethods;
using Kurisu.RemoteCall.Default;
using Kurisu.RemoteCall.Abstractions;
using Xunit;

namespace Kurisu.Test.RemoteCall.Generated
{
    public class Attributes_Tests
    {
        [Fact]
        public void EnableRemoteClientAttribute_BaseUrlTrailingSlash_Throws()
        {
            Assert.Throws<ArgumentException>(() => new EnableRemoteClientAttribute("name", "http://a/b/"));
        }

        [Fact]
        public void EnableRemoteClientAttribute_DefaultName_AssignedOnConfigureServices()
        {
            var attr = new EnableRemoteClientAttribute("http://example.com");
            var services = new ServiceCollection();
            attr.ConfigureServices(services);
            // Ensure http client registration exists with default name
            var provider = services.BuildServiceProvider();
            var factory = provider.GetService<IHttpClientFactory>();
            // just assert services built and registration didn't throw and Name defaulted
            Assert.Equal(Kurisu.RemoteCall.RemoteCallStatic.DefaultClientName, attr.Name);
        }

        [Fact]
        public void RequestQueryAttribute_NameProperty_Works()
        {
            var a = new RequestQueryAttribute();
            Assert.Null(a.Name);
            var b = new RequestQueryAttribute("q");
            Assert.Equal("q", b.Name);
        }

        [Fact]
        public void RequestRouteAttribute_NameProperty_Works()
        {
            var a = new RequestRouteAttribute();
            Assert.Null(a.Name);
            var b = new RequestRouteAttribute("id");
            Assert.Equal("id", b.Name);
        }

        [Fact]
        public void ResponseResultAttribute_DefaultHandler_IsStandard()
        {
            var a = new ResponseResultAttribute();
            Assert.Equal(typeof(DefaultRemoteCallStandardResponseResultHandler), a.Handler);
        }

        [Fact]
        public void ResponseResultAttribute_NullType_Throws()
        {
            Assert.Throws<ArgumentException>(() => new ResponseResultAttribute(null));
        }

        private class DummyHandler { }

        [Fact]
        public void ResponseResultAttribute_NonHandlerType_Throws()
        {
            Assert.Throws<ArgumentException>(() => new ResponseResultAttribute(typeof(DummyHandler)));
        }

        [Fact]
        public void GetAttribute_TemplateAndMethod_Works()
        {
            var g = new GetAttribute("api/vals");
            Assert.Equal("api/vals", g.Template);
            Assert.Equal(System.Net.Http.HttpMethod.Get, g.HttpMethod);
        }

        [Fact]
        public void PostAttribute_ContentTypeAndAsUrlencoded_Works()
        {
            var p = new PostAttribute("u", "application/json", true);
            Assert.Equal<string>("u", p.Template);
            Assert.Equal<string>("application/json", p.ContentType);
            Assert.True((bool)p.AsUrlencodedFormat);

            var p2 = new PostAttribute("u", "application/x-www-form-urlencoded", false);
            // specifying form content type forces AsUrlencodedFormat true
            Assert.True((bool)p2.AsUrlencodedFormat);
            Assert.Equal<string>("application/x-www-form-urlencoded", p2.ContentType);
        }
    }
}
