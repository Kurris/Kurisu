// <auto-generated />
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Reflection;
using System.Text;
using Kurisu.RemoteCall.Utils;
using Kurisu.RemoteCall.Abstractions;
using Kurisu.RemoteCall.Attributes;
using Newtonsoft.Json.Linq;
using Xunit;
using Kurisu.RemoteCall;
using Kurisu.RemoteCall.Attributes.HelpMethods;

namespace Kurisu.Test.RemoteCall.Generated
{
    public class RemoteCall_Utils_Tests
    {
        private readonly IJsonSerializer _jsonSerializer = new NewtonsoftJsonSerializer();
        private readonly CommonUtils _commonUtils;

        public RemoteCall_Utils_Tests()
        {
            _commonUtils = new CommonUtils(_jsonSerializer);
        }

        [Fact]
        public void TypeHelper_IsSimpleType_Works()
        {
            Assert.True(TypeHelper.IsSimpleType(typeof(int)));
            Assert.True(TypeHelper.IsSimpleType(typeof(string)));
            Assert.True(TypeHelper.IsSimpleType(typeof(DateTime)));
            Assert.True(TypeHelper.IsSimpleType(typeof(Uri))); // Uri is considered simple type
        }

        [Fact]
        public void TypeHelper_IsEnumerable_Works()
        {
            Assert.True(TypeHelper.IsEnumerable(typeof(int[]), out var et));
            Assert.Equal(typeof(int), et);
            Assert.False(TypeHelper.IsEnumerable(typeof(string), out _));
            Assert.True(TypeHelper.IsEnumerable(typeof(List<string>), out var et2));
            Assert.Equal(typeof(string), et2);
        }

        [Fact]
        public void NewtonsoftJsonSerializer_Serialize_Deserialize_Works()
        {
            var obj = new { A = 1, B = "x" };
            var s = _jsonSerializer.Serialize(obj);
            var d = _jsonSerializer.Deserialize<Dictionary<string, object>>(s);
            Assert.Equal("1", d["A"].ToString());
            Assert.Equal("x", d["B"].ToString());
        }

        [Fact]
        public void CommonUtils_ToObjDictionary_SimpleTypeWithPrefix_ThrowsOnEmptyPrefix()
        {
            // simple type requires non-empty prefix
            Assert.Throws<ArgumentException>(() => _commonUtils.ToObjDictionary(string.Empty, 5));
        }

        [Fact]
        public void CommonUtils_ToObjDictionary_JToken_Works()
        {
            var j = JToken.Parse("{\"x\": {\"y\": 2}, \"arr\": [1,2]} ");
            var dict = _commonUtils.ToObjDictionary(null, j);
            Assert.Equal("2", dict["x.y"].ToString());
            Assert.Equal("1", dict["arr[0]"].ToString());
            Assert.Equal("2", dict["arr[1]"].ToString());
        }

        [Fact]
        public void CommonUtils_ToObjDictionary_NonGenericDict_Works()
        {
            var d = new Hashtable();
            d["k1"] = 123;
            d["k2"] = new { inner = "v" };
            var dict = _commonUtils.ToObjDictionary(null, d);
            Assert.Equal("123", dict["k1"].ToString());
            Assert.Equal("v", ((Dictionary<string, object>)_jsonSerializer.Deserialize<Dictionary<string, object>>(_jsonSerializer.Serialize(new { inner = "v" })))["inner"].ToString());
        }

        [Fact]
        public void CommonUtils_ToObjDictionary_GenericDict_Works()
        {
            var d = new Dictionary<string, object>
            {
                ["a"] = 1,
                ["b"] = new List<int> { 2, 3 }
            };
            var dict = _commonUtils.ToObjDictionary(null, d);
            Assert.Equal("1", dict["a"].ToString());
            Assert.Equal("2", dict["b[0]"].ToString());
            Assert.Equal("3", dict["b[1]"].ToString());
        }

        [Fact]
        public void CommonUtils_ToObjDictionary_Enumerable_Works()
        {
            var list = new List<object> { 5, new { name = "n" } };
            var dict = _commonUtils.ToObjDictionary("p", list);
            Assert.Equal("5", dict["p[0]"].ToString());
            Assert.Equal("n", _jsonSerializer.Deserialize<Dictionary<string, object>>(_jsonSerializer.Serialize(list[1]))["name"].ToString());
        }

        [Fact]
        public void TypeExtensions_TryGetCustomAttribute_Works()
        {
            // create a dummy proxy invocation using reflection - use MethodInfo from a dummy interface
            var method = typeof(DummyInterface).GetMethod(nameof(DummyInterface.M1));
            var proxy = new TestProxyInvocation(typeof(DummyInterface), method);
            Assert.True(proxy.TryGetCustomAttribute<RequestDisableLogAttribute>(out var attr));
            Assert.NotNull(attr);
        }

        private interface DummyInterface
        {
            [RequestDisableLog]
            void M1();
        }

        private class TestProxyInvocation : Kurisu.RemoteCall.Proxy.Abstractions.IProxyInvocation
        {
            public IServiceProvider ServiceProvider { get; set; }
            public Type InterfaceType { get; set; }
            public MethodInfo Method { get; set; }
            public ParameterInfo[] ParameterInfos { get; set; }
            public object[] ParameterValues { get; set; }
            public List<ParameterValue> WrapParameterValues { get; set; }
            public object ReturnValue { get; set; }
            public Kurisu.RemoteCall.Default.RemoteClient RemoteClient { get; set; }

            public object[] Arguments => Array.Empty<object>();

            public TestProxyInvocation(Type t, MethodInfo m)
            {
                InterfaceType = t;
                Method = m;
            }

            public void SetReturnValue(object value) => throw new NotImplementedException();
            public object GetArgumentValue(int index) => throw new NotImplementedException();
        }

        [Fact]
        public async System.Threading.Tasks.Task HttpContentUtils_Create_NoParams_ReturnsEmptyJsonObject()
        {
            var method = typeof(FakePost).GetMethod(nameof(FakePost.Empty));
            var content = HttpContentUtils.Create(method, null, _jsonSerializer, _commonUtils);
            var s = await content.ReadAsStringAsync();
            Assert.Equal("{}", s);
        }

        [Fact]
        public async System.Threading.Tasks.Task HttpContentUtils_Create_StringParam_NotAsUrlencoded_SendsString()
        {
            var method = typeof(FakePost).GetMethod(nameof(FakePost.PostString));
            var p = new List<ParameterValue> { new ParameterValue(method.GetParameters()[0], "abc") };
            var content = HttpContentUtils.Create(method, p, _jsonSerializer, _commonUtils);
            var s = await content.ReadAsStringAsync();
            Assert.Equal("abc", s);
        }

        [Fact]
        public async System.Threading.Tasks.Task HttpContentUtils_Create_AsUrlencoded_RawString_Works()
        {
            var method = typeof(FakePost).GetMethod(nameof(FakePost.PostStringUrlEncoded));
            var p = new List<ParameterValue> { new ParameterValue(method.GetParameters()[0], "k=1&x=y z") };
            var content = HttpContentUtils.Create(method, p, _jsonSerializer, _commonUtils);
            var s = await content.ReadAsStringAsync();
            // parse key=value pairs and URL-decode values to avoid depending on specific encoding (%20 vs +)
            var pairs = s.Split(new[] { '&' }, StringSplitOptions.RemoveEmptyEntries);
            var dict = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
            foreach (var pair in pairs)
            {
                var idx = pair.IndexOf('=');
                if (idx < 0)
                {
                    dict[System.Net.WebUtility.UrlDecode(pair)] = string.Empty;
                }
                else
                {
                    var k = System.Net.WebUtility.UrlDecode(pair.Substring(0, idx));
                    var v = System.Net.WebUtility.UrlDecode(pair.Substring(idx + 1));
                    dict[k] = v;
                }
            }

            Assert.True(dict.ContainsKey("k"));
            Assert.Equal("1", dict["k"]);
            Assert.True(dict.ContainsKey("x"));
            Assert.Equal("y z", dict["x"]);
        }

        [Fact]
        public async System.Threading.Tasks.Task HttpContentUtils_Create_AsUrlencoded_Object_Works_FormUrlEncoded()
        {
            var method = typeof(FakePost).GetMethod(nameof(FakePost.PostForm));
            var p = new List<ParameterValue> { new ParameterValue(method.GetParameters()[0], new { a = "b" }) };
            var content = HttpContentUtils.Create(method, p, _jsonSerializer, _commonUtils);
            var s = await content.ReadAsStringAsync();
            Assert.Contains("a=b", s);
        }

        [Fact]
        public void HttpContentUtils_Create_AsUrlencoded_RawString_Conflict_Throws()
        {
            var method = typeof(FakePost).GetMethod(nameof(FakePost.PostStringUrlEncodedFormType));
            var p = new List<ParameterValue> { new ParameterValue(method.GetParameters()[0], "k=1") };
            Assert.Throws<InvalidOperationException>(() => HttpContentUtils.Create(method, p, _jsonSerializer, _commonUtils));
        }

        private class FakePost
        {
            [Post("u")] public void Empty() { }
            [Post("u")] public void PostString(string s) { }
            [Post("u", asUrlencodedFormat: true)] public void PostStringUrlEncoded(string s) { }
            [Post("u", contentType: "application/x-www-form-urlencoded", asUrlencodedFormat: true)] public void PostForm(object o) { }
            [Post("u", contentType: "application/x-www-form-urlencoded", asUrlencodedFormat: true)] public void PostStringUrlEncodedFormType(string s) { }
        }
    }
}
