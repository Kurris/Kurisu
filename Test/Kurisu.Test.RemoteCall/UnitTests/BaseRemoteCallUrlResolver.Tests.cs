// <auto-generated />
using System.Collections.Generic;
using Kurisu.RemoteCall.Default;
using Kurisu.RemoteCall.Utils;
using Kurisu.RemoteCall.Abstractions;
using Microsoft.Extensions.Configuration;
using Xunit;
using Kurisu.RemoteCall;

namespace Kurisu.Test.RemoteCall.UnitTests
{
    public class BaseRemoteCallUrlResolver_Tests
    {
        private IJsonSerializer CreateSerializer() => new NewtonsoftJsonSerializer();
        private ICommonUtils CreateCommonUtils() => new CommonUtils(CreateSerializer());

        [Fact]
        public void ResolveUrl_Replaces_Placeholder_From_IConfiguration()
        {
            var config = new ConfigurationBuilder().AddInMemoryCollection(new Dictionary<string, string>
            {
                ["Path"] = "example.com"
            }).Build();

            var resolver = new DefaultRemoteCallUrlResolver(config, CreateCommonUtils());
            // template empty => ResolveUrl returns resolved baseUrl
            var url = resolver.ResolveUrl("GET", "http://${Path}", string.Empty, new List<ParameterValue>());
            Assert.Equal("http://example.com", url);
        }

        [Fact]
        public void ResolveUrl_Unclosed_Placeholder_Remains_Unchanged()
        {
            var config = new ConfigurationBuilder().AddInMemoryCollection(new Dictionary<string, string>
            {
                ["Path"] = "example.com"
            }).Build();

            var resolver = new DefaultRemoteCallUrlResolver(config, CreateCommonUtils());
            var raw = "http://${Path"; // missing closing '}'
            var url = resolver.ResolveUrl("GET", raw, string.Empty, new List<ParameterValue>());
            Assert.Equal(raw, url);
        }

        [Fact]
        public void ResolveUrl_NullBaseAndEmptyTemplate_ReturnsEmptyString()
        {
            var config = new ConfigurationBuilder().Build();
            var resolver = new DefaultRemoteCallUrlResolver(config, CreateCommonUtils());
            var url = resolver.ResolveUrl("GET", null, string.Empty, new List<ParameterValue>());
            Assert.Equal(string.Empty, url);
        }
    }
}
