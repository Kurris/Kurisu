// <auto-generated />
using System.Reflection;
using System.Text;
using Kurisu.RemoteCall.Utils;
using Kurisu.RemoteCall;
using Kurisu.RemoteCall.Attributes;
using Kurisu.RemoteCall.Abstractions;
using Kurisu.RemoteCall.Attributes.HelpMethods;
using Xunit;

namespace Kurisu.Test.RemoteCall.UnitTests;

public class HttpContentUtils_ExtraTests
{
    private IJsonSerializer _json = new Kurisu.RemoteCall.Utils.NewtonsoftJsonSerializer();
    private ICommonUtils _common;

    public HttpContentUtils_ExtraTests()
    {
        _common = new CommonUtils(_json);
    }

    private class Dummy
    {
        [Post("p", contentType: "application/x-www-form-urlencoded", asUrlencodedFormat: true)]
        public Task<string> RawForm(string raw) => Task.FromResult(string.Empty);

        [Post("p", contentType: "text/plain", asUrlencodedFormat: true)]
        public Task<string> RawText(string raw) => Task.FromResult(string.Empty);

        [Post("p", contentType: "application/x-www-form-urlencoded", asUrlencodedFormat: true)]
        public Task<string> Multi(object a, object b) => Task.FromResult(string.Empty);

        [Post("p")] public Task<string> SingleString(string s) => Task.FromResult(string.Empty);
    }

    [Fact]
    public void Create_EmptyParameters_ReturnsJsonEmptyObject()
    {
        var m = typeof(Dummy).GetMethod(nameof(Dummy.SingleString))!;
        var content = HttpContentUtils.Create(m, new List<ParameterValue>(), _json, _common);
        var str = content.ReadAsStringAsync().Result;
        Assert.Equal("{}", str);
        Assert.Equal("application/json", content.Headers.ContentType.MediaType);
    }

    [Fact]
    public void Create_AsUrlencoded_RawString_WithFormContentType_Throws()
    {
        var m = typeof(Dummy).GetMethod(nameof(Dummy.RawForm))!;
        var pinfo = m.GetParameters()[0];
        var pv = new ParameterValue(pinfo, "a=1&b=2");
        Assert.Throws<InvalidOperationException>(() => HttpContentUtils.Create(m, new List<ParameterValue>{ pv }, _json, _common));
    }

    [Fact]
    public void Create_AsUrlencoded_RawString_EncodesAndReturnsStringContent()
    {
        var m = typeof(Dummy).GetMethod(nameof(Dummy.RawText))!;
        var pinfo = m.GetParameters()[0];
        var pv = new ParameterValue(pinfo, "a=1 b=2");
        var content = HttpContentUtils.Create(m, new List<ParameterValue>{ pv }, _json, _common);
        var body = content.ReadAsStringAsync().Result;
        // WebUtility.UrlEncode encodes space as '+' in application/x-www-form-urlencoded style
        Assert.Contains("a=1+b%3D2", body);
        Assert.Equal("text/plain", content.Headers.ContentType.MediaType);
    }

    [Fact]
    public void Create_AsUrlencoded_MultipleParams_FormUrlEncodedContent()
    {
        var m = typeof(Dummy).GetMethod(nameof(Dummy.Multi))!;
        var p1 = new ParameterValue(m.GetParameters()[0], new { x = 1 });
        var p2 = new ParameterValue(m.GetParameters()[1], new { y = 2 });
        var content = HttpContentUtils.Create(m, new List<ParameterValue>{ p1, p2 }, _json, _common);
        Assert.IsType<System.Net.Http.FormUrlEncodedContent>(content);
        var body = content.ReadAsStringAsync().Result;
        Assert.Contains("x=1", body);
        Assert.Contains("y=2", body);
    }
}
