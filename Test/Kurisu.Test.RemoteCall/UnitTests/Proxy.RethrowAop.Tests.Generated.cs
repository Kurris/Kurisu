// <auto-generated />
using Kurisu.RemoteCall;
using Kurisu.RemoteCall.Proxy;
using Kurisu.RemoteCall.Proxy.Abstractions;
using System.Reflection;
using Kurisu.RemoteCall.Default;

namespace Kurisu.Test.RemoteCall.UnitTests;

public class Proxy_Rethrow_Aop_Tests
{
    [Fact]
    public void Rethrow_Null_Throws()
    {
        Assert.Throws<ArgumentNullException>(() => ((Exception)null).Rethrow());
    }

    [Fact]
    public void RethrowIfFaulted_NullTask_Throws()
    {
        Assert.Throws<ArgumentNullException>(() => ((Task)null).RethrowIfFaulted());
    }

    [Fact]
    public void RethrowIfFaulted_FaultedTask_ReThrowsException()
    {
        var t = Task.FromException(new InvalidOperationException("boom"));
        var ex = Assert.Throws<InvalidOperationException>(() => t.RethrowIfFaulted());
        Assert.Equal("boom", ex.Message);
    }

    [Fact]
    public void RethrowIfFaulted_FaultedAggregate_ReThrowsInner()
    {
        var inner = new Exception("inner");
        var agg = new AggregateException(inner);
        var t = Task.FromException(agg);
        var ex = Assert.ThrowsAny<Exception>(() => t.RethrowIfFaulted());
        Assert.Contains("inner", ex.Message);
    }

    private class TestAop : Aop
    {
        private readonly Task _taskToReturn;
        private readonly Task<object> _taskObjToReturn;

        public TestAop(Task taskToReturn)
        {
            _taskToReturn = taskToReturn;
            _taskObjToReturn = Task.FromResult<object>(null!);
        }

        public TestAop(Task<object> taskObjToReturn)
        {
            _taskObjToReturn = taskObjToReturn;
            _taskToReturn = Task.CompletedTask;
        }

        protected override Task HandleAsync(IProxyInvocation invocation)
        {
            return _taskToReturn;
        }

        protected override async Task<TResult> HandleAsync<TResult>(IProxyInvocation invocation)
        {
            var o = await _taskObjToReturn.ConfigureAwait(false);
            return (TResult)(object)o!;
        }
    }

    private class SimpleInvocation : IProxyInvocation
    {
        public IServiceProvider ServiceProvider { get; set; }
        public Type InterfaceType { get; set; }
        public MethodInfo Method { get; set; }
        public ParameterInfo[] ParameterInfos { get; set; }
        public object[] ParameterValues { get; set; }
        public List<ParameterValue> WrapParameterValues { get; set; }
        public object ReturnValue { get; set; }
        public RemoteClient RemoteClient { get; set; }

        public SimpleInvocation(MethodInfo method)
        {
            Method = method;
            ParameterInfos = method.GetParameters();
            ParameterValues = new object[ParameterInfos.Length];
            WrapParameterValues = new List<ParameterValue>();
        }
    }

    [Fact]
    public void Aop_Intercept_Void_TaskFaulted_Rethrows()
    {
        var method = typeof(Proxy_Rethrow_Aop_Tests).GetMethod(nameof(VoidTarget))!;
        var inv = new SimpleInvocation(method);
        var aop = new TestAop(Task.FromException(new InvalidOperationException("fail")));
        var ex = Assert.Throws<InvalidOperationException>(() => aop.Intercept(inv));
        Assert.Equal("fail", ex.Message);
    }

    public static void VoidTarget() { }

    [Fact]
    public void Aop_Intercept_Result_TaskFaulted_Rethrows()
    {
        var method = typeof(Proxy_Rethrow_Aop_Tests).GetMethod(nameof(IntTarget))!;
        var inv = new SimpleInvocation(method);
        var tcs = Task.FromException<object>(new InvalidOperationException("oops"));
        var aop = new TestAop(tcs);
        var ex = Assert.ThrowsAny<Exception>(() => aop.Intercept(inv));
        Assert.Contains("oops", ex.Message);
    }

    public static int IntTarget() => 0;
}
