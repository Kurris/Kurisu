// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Reflection;
using System.Text;
using Kurisu.RemoteCall.Utils;
using Kurisu.RemoteCall.Abstractions;
using Kurisu.RemoteCall;
using Kurisu.RemoteCall.Attributes;
using Kurisu.RemoteCall.Attributes.HelpMethods;
using Xunit;

namespace Kurisu.Test.RemoteCall.UnitTests
{
    public class HttpContentUtils_ExtraTests2
    {
        private IJsonSerializer CreateSerializer() => new NewtonsoftJsonSerializer();
        private ICommonUtils CreateCommonUtils() => new CommonUtils(CreateSerializer());

        [Post("api/test", contentType: "application/x-www-form-urlencoded", asUrlencodedFormat: true)]
        private static void DummyMethodWithString(string s) { }

        [Fact]
        public void Create_AsUrlencoded_RawString_DefaultContentType_ReturnsReencodedStringContent()
        {
            var method = typeof(HttpContentUtils_ExtraTests2).GetMethod(nameof(DummyMethodWithString), BindingFlags.NonPublic | BindingFlags.Static)!;
            var pinfo = method.GetParameters().First();

            var parameters = new List<ParameterValue> { new ParameterValue(pinfo, "a=1&b=two words") };

            var serializer = CreateSerializer();
            var utils = CreateCommonUtils();

            // DummyMethodWithString has contentType application/x-www-form-urlencoded and asUrlencodedFormat=true
            // so Create should throw when single string and asUrlencodedFormat=true.
            Assert.Throws<InvalidOperationException>(() => HttpContentUtils.Create(method, parameters, serializer, utils));
        }

        [Fact]
        public async Task Create_NonAsUrlencoded_Object_SerializesToJson()
        {
            var method = typeof(HttpContentUtils_ExtraTests2).GetMethod(nameof(DummyMethodWithString), BindingFlags.NonPublic | BindingFlags.Static)!;
            var pinfo = method.GetParameters().First();
            var parameters = new List<ParameterValue> { new ParameterValue(pinfo, new { X = 5 }) };
            var serializer = CreateSerializer();
            var utils = CreateCommonUtils();
            // call Create with a method that has no Post attribute (use object.ToString)
            var noAttrMethod = typeof(object).GetMethod(nameof(object.ToString))!;
            var content = HttpContentUtils.Create(noAttrMethod, parameters, serializer, utils);
            var s =await content.ReadAsStringAsync();
            Assert.Contains("X", s);
        }
    }
}
