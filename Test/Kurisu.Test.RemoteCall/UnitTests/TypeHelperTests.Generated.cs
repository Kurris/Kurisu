// <auto-generated />
using Kurisu.RemoteCall.Utils;

namespace Kurisu.Test.RemoteCall.UnitTests;

public class TypeHelperTests
{
    [Fact]
    public void IsSimpleType_PrimitiveAndSpecials()
    {
        Assert.True(TypeHelper.IsSimpleType(typeof(int)));
        Assert.True(TypeHelper.IsSimpleType(typeof(string)));
        Assert.True(TypeHelper.IsSimpleType(typeof(decimal)));
        Assert.True(TypeHelper.IsSimpleType(typeof(DateTime)));
        Assert.True(TypeHelper.IsSimpleType(typeof(DateTimeOffset)));
        Assert.True(TypeHelper.IsSimpleType(typeof(TimeSpan)));
        Assert.True(TypeHelper.IsSimpleType(typeof(Guid)));
        Assert.True(TypeHelper.IsSimpleType(typeof(Uri)));
        Assert.True(TypeHelper.IsSimpleType(typeof(byte[])));
        Assert.False(TypeHelper.IsSimpleType(typeof(object)));
        Assert.False(TypeHelper.IsSimpleType(typeof(List<int>)));
    }

    [Fact]
    public void IsEnumerable_DetectsArrayAndGeneric()
    {
        Assert.True(TypeHelper.IsEnumerable(typeof(int[]), out var et1));
        Assert.Equal(typeof(int), et1);

        Assert.True(TypeHelper.IsEnumerable(typeof(List<string>), out var et2));
        Assert.Equal(typeof(string), et2);

        Assert.False(TypeHelper.IsEnumerable(typeof(string), out _));
    }

    [Fact]
    public void IsEnumerableOfSimple_Works()
    {
        Assert.True(TypeHelper.IsEnumerableOfSimple(typeof(List<int>)));
        Assert.False(TypeHelper.IsEnumerableOfSimple(typeof(List<object>)));
    }
}

