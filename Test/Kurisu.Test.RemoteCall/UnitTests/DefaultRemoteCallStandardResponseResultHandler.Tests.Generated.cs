// <auto-generated />
using System.Net;
using Kurisu.RemoteCall.Default;
using Kurisu.RemoteCall.Utils;
using Kurisu.RemoteCall.Abstractions;

namespace Kurisu.Test.RemoteCall.UnitTests;

public class DefaultRemoteCallStandardResponseResultHandler_Tests
{
    [Fact]
    public void Handle_ReturnsData_WhenStatus200AndCode200()
    {
        var serializer = new NewtonsoftJsonSerializer();
        var handler = new DefaultRemoteCallStandardResponseResultHandler(serializer);
        var json = "{\"Code\":200,\"Msg\":\"ok\",\"Data\":123}";
        var result = handler.Handle<int>(HttpStatusCode.OK, json);
        Assert.Equal(123, result);
    }

    [Fact]
    public void Handle_ThrowsException_WhenStatus500_WithMsg()
    {
        var serializer = new NewtonsoftJsonSerializer();
        var handler = new DefaultRemoteCallStandardResponseResultHandler(serializer);
        var json = "{\"Code\":500,\"Msg\":\"server error\",\"Data\":null}";
        var ex = Assert.Throws<Exception>(() => handler.Handle<object>(HttpStatusCode.InternalServerError, json));
        Assert.Contains("server error", ex.Message);
    }

    [Fact]
    public void Handle_ThrowsHttpRequestException_WhenNoMsg()
    {
        var serializer = new NewtonsoftJsonSerializer();
        var handler = new DefaultRemoteCallStandardResponseResultHandler(serializer);
        var json = "{\"Code\":500,\"Msg\":\"\",\"Data\":null}";
        Assert.Throws<HttpRequestException>(() => handler.Handle<object>(HttpStatusCode.InternalServerError, json));
    }

    [Fact]
    public void Handle_ThrowsException_WhenStatus200_ButCodeNot200_WithMsg()
    {
        var serializer = new NewtonsoftJsonSerializer();
        var handler = new DefaultRemoteCallStandardResponseResultHandler(serializer);
        var json = "{\"Code\":400,\"Msg\":\"bad\",\"Data\":null}";
        var ex = Assert.Throws<Exception>(() => handler.Handle<object>(HttpStatusCode.OK, json));
        Assert.Contains("bad", ex.Message);
    }
}

