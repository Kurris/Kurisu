// <auto-generated />
using System.Reflection;
using Kurisu.RemoteCall.Proxy;
using Kurisu.RemoteCall.Proxy.Abstractions;
using Kurisu.RemoteCall.Default;
using Xunit;

namespace Kurisu.Test.RemoteCall.UnitTests;

public class Proxy_Aop_NewTests
{
    private class TestInvocation : IProxyInvocation
    {
        public IServiceProvider ServiceProvider { get; set; }
        public Type InterfaceType { get; set; }
        public MethodInfo Method { get; set; }
        public ParameterInfo[] ParameterInfos { get; set; }
        public object[] ParameterValues { get; set; }
        public List<Kurisu.RemoteCall.ParameterValue> WrapParameterValues { get; set; }
        public object ReturnValue { get; set; }
        public RemoteClient RemoteClient { get; set; }
    }

    private abstract class SimpleAop : Aop
    {
        public bool WasCalled { get; protected set; }

        protected override Task HandleAsync(IProxyInvocation invocation)
        {
            WasCalled = true;
            return Task.CompletedTask;
        }

        protected override Task<TResult> HandleAsync<TResult>(IProxyInvocation invocation)
        {
            WasCalled = true;
            object result = default(TResult)!;
            if (typeof(TResult) == typeof(string))
            {
                result = (object)"ok";
            }

            return Task.FromResult((TResult)result!);
        }
    }

    [Fact]
    public void Intercept_VoidMethod_CallsHandle()
    {
        var impl = new ConcreteAop();
        var invocation = new TestInvocation();
        invocation.Method = typeof(ITest).GetMethod(nameof(ITest.VoidMethod))!;

        impl.Intercept(invocation);

        Assert.True(impl.WasCalled);
        Assert.Null(invocation.ReturnValue);
    }

    [Fact]
    public void Intercept_NonVoidMethod_ReturnsValue()
    {
        var impl = new ConcreteAop();
        var invocation = new TestInvocation();
        invocation.Method = typeof(ITest2).GetMethod(nameof(ITest2.Get))!;

        impl.Intercept(invocation);

        Assert.True(impl.WasCalled);
        Assert.Equal("ok", invocation.ReturnValue);
    }

    private class ConcreteAop : SimpleAop { }

    private interface ITest
    {
        void VoidMethod();
    }

    private interface ITest2
    {
        string Get();
    }
}

