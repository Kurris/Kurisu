// <auto-generated />
using System;
using Kurisu.RemoteCall.Attributes;
using Kurisu.RemoteCall.Default;
using Kurisu.RemoteCall.Abstractions;
using Kurisu.RemoteCall.Utils;
using Xunit;

namespace Kurisu.Test.RemoteCall.UnitTests
{
    public class ResponseResultAttribute_Tests
    {
        [Fact]
        public void DefaultCtor_UsesStandardHandler()
        {
            var attr = new ResponseResultAttribute();
            Assert.Equal(typeof(DefaultRemoteCallStandardResponseResultHandler), attr.Handler);
        }

        private class BadHandler { }

        [Fact]
        public void Ctor_InvalidHandler_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new ResponseResultAttribute(typeof(BadHandler)));
        }

        private class GoodHandler : IRemoteCallResponseResultHandler
        {
            public T Handle<T>(System.Net.HttpStatusCode statusCode, string content)
            {
                return default!;
            }
        }

        [Fact]
        public void Ctor_ValidHandler_SetsHandler()
        {
            var attr = new ResponseResultAttribute(typeof(GoodHandler));
            Assert.Equal(typeof(GoodHandler), attr.Handler);
        }
    }
}

