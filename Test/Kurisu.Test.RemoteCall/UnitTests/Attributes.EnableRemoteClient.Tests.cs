// <auto-generated />
using System;
using Microsoft.Extensions.DependencyInjection;
using Kurisu.RemoteCall.Attributes;
using Kurisu.RemoteCall.Abstractions;
using Microsoft.Extensions.Http;
using Xunit;

namespace Kurisu.Test.RemoteCall.UnitTests
{
    public class EnableRemoteClientAttribute_Tests
    {
        [Fact]
        public void Ctor_BaseUrlEndsWithSlash_Throws()
        {
            Assert.Throws<ArgumentException>(() => new EnableRemoteClientAttribute("name", "http://example.com/"));
        }

        private class TestPolicy : IRemoteCallPolicyHandler
        {
            public bool Configured { get; private set; }
            public IHttpClientBuilder ConfigureHttpClient(IHttpClientBuilder builder)
            {
                Configured = true;
                return builder;
            }
        }

        [Fact]
        public void ConfigureServices_DefaultName_UsesRemoteCallStaticDefault()
        {
            var services = new ServiceCollection();
            var attr = new EnableRemoteClientAttribute("", "http://localhost");
            // ensure RemoteCallStatic.DefaultClientName set
            Kurisu.RemoteCall.RemoteCallStatic.DefaultClientName = "defname";
            attr.ConfigureServices(services);
            var sp = services.BuildServiceProvider();
            var factory = sp.GetRequiredService<IHttpClientFactory>();
            Assert.NotNull(factory);
        }

        [Fact]
        public void ConfigureServices_WithPolicyHandler_InvokesConfigure()
        {
            var services = new ServiceCollection();
            var attr = new EnableRemoteClientAttribute("test", "http://localhost") { PolicyHandler = typeof(TestPolicy) };
            attr.ConfigureServices(services);
            var sp = services.BuildServiceProvider();
            // Ensure HttpClientFactory is registered
            var factory = sp.GetRequiredService<IHttpClientFactory>();
            Assert.NotNull(factory);
        }
    }
}
