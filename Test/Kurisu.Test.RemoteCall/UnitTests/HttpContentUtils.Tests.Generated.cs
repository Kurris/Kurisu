// <auto-generated />
using System.Net.Http;
using System.Reflection;
using System.Text;
using Kurisu.RemoteCall;
using Kurisu.RemoteCall.Attributes;
using Kurisu.RemoteCall.Utils;
using Kurisu.Test.RemoteCall.TestHelpers;

namespace Kurisu.Test.RemoteCall.UnitTests;

public class HttpContentUtils_Tests : IClassFixture<RemoteCallTestFixture>
{
    private readonly RemoteCallTestFixture _fixture;
    public HttpContentUtils_Tests(RemoteCallTestFixture fixture) => _fixture = fixture;

    private class PostMethods
    {
        [Post("")]
        public void DefaultPost(string v) { }

        [Post("", contentType: "application/json", asUrlencodedFormat: true)]
        public void AsUrlencodedString(string raw) { }

        [Post("", contentType: "application/x-www-form-urlencoded", asUrlencodedFormat: true)]
        public void AsUrlencodedForm(int a, int b) { }

        [Post("", asUrlencodedFormat: true)]
        public void AsUrlencodedMultiple(object x, object y) { }

        [Post("")]
        public void JsonPost(object obj) { }

        [Post("", contentType: "application/x-www-form-urlencoded", asUrlencodedFormat: true)]
        public void AsUrlencodedSingleStringForm(string raw) { }
    }

    [Fact]
    public void Create_ReturnsDefaultEmptyJson_WhenNoParameters()
    {
        var m = typeof(PostMethods).GetMethod("DefaultPost")!;
        var content = HttpContentUtils.Create(m, new List<ParameterValue>(), new NewtonsoftJsonSerializer(), _fixture.GetService<ICommonUtils>());
        var s = content.ReadAsStringAsync().Result;
        Assert.Equal("{}", s);
    }

    [Fact]
    public void Create_AsUrlencoded_RawString_ParsesAndEncodes()
    {
        var m = typeof(PostMethods).GetMethod("AsUrlencodedString")!;
        var parameters = new List<ParameterValue> { new ParameterValue(m.GetParameters()[0], "a=1&b=two words") };
        var content = HttpContentUtils.Create(m, parameters, new NewtonsoftJsonSerializer(), _fixture.GetService<ICommonUtils>());
        var s = content.ReadAsStringAsync().Result;
        Assert.Contains("a=1", s);
        // b value should be URL-encoded (space -> +)
        Assert.Contains("b=two+words", s);
    }

    [Fact]
    public void Create_AsUrlencoded_FormUrlEncodedContent_WhenContentTypeForm()
    {
        var m = typeof(PostMethods).GetMethod("AsUrlencodedForm")!;
        var parameters = new List<ParameterValue> { new ParameterValue(m.GetParameters()[0], 1), new ParameterValue(m.GetParameters()[1], 2) };
        var content = HttpContentUtils.Create(m, parameters, new NewtonsoftJsonSerializer(), _fixture.GetService<ICommonUtils>());
        Assert.IsType<FormUrlEncodedContent>(content);
        var s = content.ReadAsStringAsync().Result;
        Assert.Contains("a=1", s);
        Assert.Contains("b=2", s);
    }

    [Fact]
    public void Create_AsUrlencoded_MultipleParameters_UsesCommonUtils()
    {
        var m = typeof(PostMethods).GetMethod("AsUrlencodedMultiple")!;
        var parameters = new List<ParameterValue> { new ParameterValue(m.GetParameters()[0], new { A = 1 }), new ParameterValue(m.GetParameters()[1], new { B = 2 }) };
        var content = HttpContentUtils.Create(m, parameters, new NewtonsoftJsonSerializer(), _fixture.GetService<ICommonUtils>());
        var s = content.ReadAsStringAsync().Result;
        Assert.Contains("A=1", s.Replace("%22",""));
    }

    [Fact]
    public void Create_JsonSerializesNonStringParameter()
    {
        var m = typeof(PostMethods).GetMethod("JsonPost")!;
        var parameters = new List<ParameterValue> { new ParameterValue(m.GetParameters()[0], new { X = 5 }) };
        var content = HttpContentUtils.Create(m, parameters, new NewtonsoftJsonSerializer(), _fixture.GetService<ICommonUtils>());
        var s = content.ReadAsStringAsync().Result;
        Assert.Contains("\"X\":5", s);
    }

    [Fact]
    public void Create_AsUrlencoded_RawString_WithFormContent_Throws()
    {
        var m = typeof(PostMethods).GetMethod("AsUrlencodedSingleStringForm")!;
        var parameters = new List<ParameterValue> { new ParameterValue(m.GetParameters()[0], "a=1&b=2") };
        Assert.Throws<InvalidOperationException>(() => HttpContentUtils.Create(m, parameters, new NewtonsoftJsonSerializer(), _fixture.GetService<ICommonUtils>()));
    }
}
