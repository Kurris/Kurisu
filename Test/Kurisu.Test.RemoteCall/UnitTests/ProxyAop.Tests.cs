// <auto-generated />
using System;
using System.Reflection;
using System.Threading.Tasks;
using Kurisu.RemoteCall.Proxy;
using Kurisu.RemoteCall.Proxy.Abstractions;
using Xunit;

namespace Kurisu.Test.RemoteCall.UnitTests
{
    public class ProxyAop_Tests
    {
        private class TestInvocation : IProxyInvocation
        {
            public IServiceProvider ServiceProvider { get; set; }
            public Type InterfaceType { get; set; }
            public MethodInfo Method { get; set; }
            public ParameterInfo[] ParameterInfos { get; set; }
            public object[] ParameterValues { get; set; }
            public System.Collections.Generic.List<Kurisu.RemoteCall.ParameterValue> WrapParameterValues { get; set; }
            public object ReturnValue { get; set; }
            public Kurisu.RemoteCall.Default.RemoteClient RemoteClient { get; set; }
        }

        private class TestAop : Aop
        {
            private readonly Task _taskToReturn;
            public TestAop(Task taskToReturn = null)
            {
                _taskToReturn = taskToReturn ?? Task.CompletedTask;
            }

            protected override Task HandleAsync(IProxyInvocation invocation)
            {
                return _taskToReturn;
            }

            protected override Task<TResult> HandleAsync<TResult>(IProxyInvocation invocation)
            {
                if (typeof(TResult) == typeof(string))
                {
                    object o = "ok";
                    return Task.FromResult((TResult)o);
                }

                return Task.FromResult(default(TResult));
            }
        }

        private static void DummyVoid() { }
        private static string DummyString() => "x";
        private static Task DummyTask() => Task.CompletedTask;
        private static Task<string> DummyTaskString() => Task.FromResult("x");

        [Fact]
        public void InterceptAsync_Assigns_Task_ReturnValue()
        {
            var inv = new TestInvocation { Method = typeof(ProxyAop_Tests).GetMethod(nameof(DummyTask), BindingFlags.Static | BindingFlags.NonPublic | BindingFlags.Public) };
            var aop = new TestAop(Task.Delay(1));
            aop.InterceptAsync(inv);
            Assert.IsAssignableFrom<Task>(inv.ReturnValue);
            var t = (Task)inv.ReturnValue;
            t.GetAwaiter().GetResult();
            Assert.True(t.IsCompleted);
        }

        [Fact]
        public void InterceptAsync_Generic_Assigns_TaskOfT_ReturnValue()
        {
            var inv = new TestInvocation { Method = typeof(ProxyAop_Tests).GetMethod(nameof(DummyTaskString), BindingFlags.Static | BindingFlags.NonPublic | BindingFlags.Public) };
            var aop = new TestAop();
            aop.InterceptAsync<string>(inv);
            Assert.IsType<Task<string>>(inv.ReturnValue);
            var t = (Task<string>)inv.ReturnValue;
            var res = t.GetAwaiter().GetResult();
            Assert.Equal("ok", res);
        }

        [Fact]
        public void Intercept_SynchronousVoid_WaitsForTask()
        {
            var invoked = false;
            var task = new Task(() => invoked = true);
            var aop = new TestAop(task);
            var inv = new TestInvocation { Method = typeof(ProxyAop_Tests).GetMethod(nameof(DummyVoid), BindingFlags.Static | BindingFlags.NonPublic | BindingFlags.Public) };
            // start task when HandleAsync is called -- wrap in Task.Run to start after call
            task.Start();
            aop.Intercept(inv);
            Assert.True(invoked);
        }

        [Fact]
        public void Intercept_SynchronousResult_SetsReturnValue()
        {
            var inv = new TestInvocation { Method = typeof(ProxyAop_Tests).GetMethod(nameof(DummyString), BindingFlags.Static | BindingFlags.NonPublic | BindingFlags.Public) };
            var aop = new TestAop();
            aop.Intercept(inv);
            Assert.Equal("ok", inv.ReturnValue);
        }
    }
}

