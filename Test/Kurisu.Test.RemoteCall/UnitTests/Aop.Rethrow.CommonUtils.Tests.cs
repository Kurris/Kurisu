// <auto-generated />
using System.Reflection;
using Kurisu.RemoteCall.Proxy;
using Kurisu.RemoteCall.Proxy.Abstractions;
using Kurisu.RemoteCall.Default;
using Kurisu.RemoteCall.Utils;
using Kurisu.RemoteCall;
using Xunit;

namespace Kurisu.Test.RemoteCall.UnitTests;

public class AopRethrowCommonUtilsTests
{
    private class Invocation : IProxyInvocation
    {
        public IServiceProvider ServiceProvider { get; set; }
        public Type InterfaceType { get; set; }
        public MethodInfo Method { get; set; }
        public ParameterInfo[] ParameterInfos { get; set; }
        public object[] ParameterValues { get; set; }
        public List<Kurisu.RemoteCall.ParameterValue> WrapParameterValues { get; set; }
        public object ReturnValue { get; set; }
        public RemoteClient RemoteClient { get; set; }
    }

    private class AopForDelay : Aop
    {
        public bool Called { get; private set; }
        private readonly int _delayMs;
        public AopForDelay(int delayMs = 10) => _delayMs = delayMs;

        protected override async Task HandleAsync(IProxyInvocation invocation)
        {
            Called = true;
            await Task.Delay(_delayMs).ConfigureAwait(false);
        }

        protected override Task<TResult> HandleAsync<TResult>(IProxyInvocation invocation)
        {
            Called = true;
            if (typeof(TResult) == typeof(string))
                return Task.FromResult((TResult)(object)"ok");

            return Task.FromResult(default(TResult)!);
        }
    }

    private class AopForFault : Aop
    {
        protected override Task HandleAsync(IProxyInvocation invocation)
        {
            return Task.FromException(new InvalidOperationException("boom"));
        }

        protected override Task<TResult> HandleAsync<TResult>(IProxyInvocation invocation)
        {
            return Task.FromException<TResult>(new InvalidOperationException("boom2"));
        }
    }

    [Fact]
    public void Intercept_Void_NotCompleted_TaskRunsAndCompletes()
    {
        var aop = new AopForDelay(20);
        var inv = new Invocation() { Method = typeof(ITest).GetMethod(nameof(ITest.VoidMethod))! };

        aop.Intercept(inv);

        Assert.True(aop.Called);
    }

    [Fact]
    public void Intercept_GenericResult_FaultedTask_ThrowsInner()
    {
        var aop = new AopForFault();
        var inv = new Invocation() { Method = typeof(ITest2).GetMethod(nameof(ITest2.Get))! };

        var ex = Assert.Throws<AggregateException>(() => aop.Intercept(inv));
        Assert.IsType<InvalidOperationException>(ex.InnerException);
    }

    [Fact]
    public void RethrowIfFaulted_TaskFromException_ThrowsInner()
    {
        var t = Task.FromException(new InvalidOperationException("x"));
        var ex = Assert.Throws<InvalidOperationException>(() => RethrowHelper.RethrowIfFaulted(t));
        Assert.Equal("x", ex.Message);
    }

    [Fact]
    public void CommonUtils_ToObjDictionary_GenericDict_Works()
    {
        var ser = new Kurisu.RemoteCall.Utils.NewtonsoftJsonSerializer();
        var utils = new CommonUtils(ser);
        var dict = new Dictionary<string, string>
        {
            ["a"] = "1",
            ["b"] = "2"
        };

        var res = utils.ToObjDictionary("", dict);
        Assert.Equal("1", res["a"].ToString());
        Assert.Equal("2", res["b"].ToString());
    }

    [Fact]
    public void Rethrow_Null_ThrowsArgumentNull()
    {
        Assert.Throws<ArgumentNullException>(() => RethrowHelper.Rethrow(null));
    }

    [Fact]
    public void RethrowIfFaulted_TaskAggregate_ThrowsInner()
    {
        var t = Task.FromException(new InvalidOperationException("inner"));
        var ex = Assert.Throws<InvalidOperationException>(() => RethrowHelper.RethrowIfFaulted(t));
        Assert.Equal("inner", ex.Message);
    }

    [Fact]
    public void CommonUtils_ToObjDictionary_JValueAndJArrayEmpty_Works()
    {
        var ser = new Kurisu.RemoteCall.Utils.NewtonsoftJsonSerializer();
        var utils = new CommonUtils(ser);

        var jv = new Newtonsoft.Json.Linq.JValue("val");
        var r1 = utils.ToObjDictionary("pre", jv);
        Assert.Equal("val", r1["pre"].ToString());

        var ja = new Newtonsoft.Json.Linq.JArray();
        var r2 = utils.ToObjDictionary("pre2", ja);
        Assert.True(r2.ContainsKey("pre2") && r2["pre2"] == null);
    }

    [Fact]
    public void CommonUtils_ToObjDictionary_NonGenericDict_Works()
    {
        var ser = new Kurisu.RemoteCall.Utils.NewtonsoftJsonSerializer();
        var utils = new CommonUtils(ser);
        var ht = new System.Collections.Hashtable();
        ht["k"] = "v";
        var res = utils.ToObjDictionary("", ht);
        Assert.Equal("v", res["k"].ToString());
    }

    [Fact]
    public void CommonUtils_ToObjDictionary_SimpleTypeEmptyPrefix_Throws()
    {
        var ser = new Kurisu.RemoteCall.Utils.NewtonsoftJsonSerializer();
        var utils = new CommonUtils(ser);
        Assert.Throws<ArgumentException>(() => utils.ToObjDictionary("", 123));
    }

    private interface ITest { void VoidMethod(); }
    private interface ITest2 { string Get(); }
}
