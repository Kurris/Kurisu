// <auto-generated />
using System;
using Kurisu.RemoteCall.Attributes;
using Kurisu.RemoteCall.Abstractions;
using Kurisu.RemoteCall.Default;
using Xunit;
using Microsoft.Net.Http.Headers;

namespace Kurisu.Test.RemoteCall.UnitTests
{
    public class RequestAuthorizeAttribute_Tests
    {
        [Fact]
        public void DefaultCtor_UsesDefaultHandler()
        {
            var attr = new RequestAuthorizeAttribute();
            Assert.Equal(typeof(DefaultRemoteCallAuthTokenHandler), attr.Handler);
            Assert.Equal(HeaderNames.Authorization, attr.HeaderName);
        }

        private class BadHandler { }

        [Fact]
        public void Ctor_InvalidHandler_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new RequestAuthorizeAttribute(typeof(BadHandler)));
        }

        private class GoodHandler : IRemoteCallAuthTokenHandler
        {
            public System.Threading.Tasks.Task<string> GetTokenAsync() => System.Threading.Tasks.Task.FromResult("t");
        }

        [Fact]
        public void Ctor_ValidHandler_SetsHandler()
        {
            var attr = new RequestAuthorizeAttribute(typeof(GoodHandler));
            Assert.Equal(typeof(GoodHandler), attr.Handler);
        }
    }
}
