// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Reflection;
using System.Text;
using Kurisu.RemoteCall;
using Kurisu.RemoteCall.Utils;
using Kurisu.RemoteCall.Abstractions;
using Kurisu.RemoteCall.Attributes;
using Kurisu.RemoteCall.Attributes.HelpMethods;
using Xunit;

namespace Kurisu.Test.RemoteCall.UnitTests
{
    public class HttpContentUtils_ExtraTests3
    {
        private IJsonSerializer CreateSerializer() => new NewtonsoftJsonSerializer();
        private ICommonUtils CreateCommonUtils() => new CommonUtils(CreateSerializer());

        [Post("api/form", contentType: "application/x-www-form-urlencoded", asUrlencodedFormat: true)]
        private static void DummyFormMethod(int a, int b) { }

        [Post("api/raw", asUrlencodedFormat: true)]
        private static void DummyRawMethod(string raw) { }

        [Fact]
        public void Create_AsUrlencoded_MultipleParams_ReturnsFormUrlEncodedContent()
        {
            var method = typeof(HttpContentUtils_ExtraTests3).GetMethod(nameof(DummyFormMethod), BindingFlags.NonPublic | BindingFlags.Static)!;
            var pInfos = method.GetParameters();
            var parameters = new List<ParameterValue>
            {
                new ParameterValue(pInfos[0], 1),
                new ParameterValue(pInfos[1], 2)
            };

            var content = HttpContentUtils.Create(method, parameters, CreateSerializer(), CreateCommonUtils());
            Assert.IsType<FormUrlEncodedContent>(content);
            var s = content.ReadAsStringAsync().Result;
            // order is not guaranteed, check both keys present
            Assert.Contains("a=1", s);
            Assert.Contains("b=2", s);
        }

        [Fact]
        public void Create_AsUrlencoded_RawString_KeyWithoutEquals_EncodesKeyWithEmptyValue()
        {
            var method = typeof(HttpContentUtils_ExtraTests3).GetMethod(nameof(DummyRawMethod), BindingFlags.NonPublic | BindingFlags.Static)!;
            var pInfo = method.GetParameters().First();
            // raw contains a key without '=' and one with value
            var parameters = new List<ParameterValue> { new ParameterValue(pInfo, "flag&k=v") };

            // DummyRawMethod has asUrlencodedFormat=true but contentType default application/json, so it should produce key= form string using StringContent
            var content = HttpContentUtils.Create(method, parameters, CreateSerializer(), CreateCommonUtils());
            var s = content.ReadAsStringAsync().Result;
            // expect flag= (empty value) and k=v encoded
            Assert.Contains("flag=", s);
            Assert.Contains("k=v", s);
        }

        [Fact]
        public void Create_EmptyParameters_ReturnsEmptyJsonObject()
        {
            var content = HttpContentUtils.Create(typeof(object).GetMethod(nameof(object.ToString))!, null, CreateSerializer(), CreateCommonUtils());
            var s = content.ReadAsStringAsync().Result;
            Assert.Equal("{}", s);
        }
    }
}

