// <auto-generated />
using System;
using System.Net;
using Kurisu.RemoteCall.Default;
using Kurisu.RemoteCall.Utils;
using Kurisu.RemoteCall.Abstractions;
using Xunit;

namespace Kurisu.Test.RemoteCall.UnitTests
{
    public class DefaultRemoteCallResponseResultHandler_Tests
    {
        private IJsonSerializer CreateSerializer() => new NewtonsoftJsonSerializer();
        private ICommonUtils CreateCommonUtils() => new CommonUtils(CreateSerializer());

        private DefaultRemoteCallResponseResultHandler CreateHandler()
            => new DefaultRemoteCallResponseResultHandler(CreateSerializer(), CreateCommonUtils());

        private class Person { public string Name { get; set; } }

        [Fact]
        public void Handle_Success_ReferenceType_ReturnsDeserialized()
        {
            var handler = CreateHandler();
            var json = "{\"Name\":\"alice\"}";
            var res = handler.Handle<Person>(HttpStatusCode.OK, json);
            Assert.Equal("alice", res.Name);
        }

        [Fact]
        public void Handle_Success_SimpleType_Converts()
        {
            var handler = CreateHandler();
            var res = handler.Handle<int>(HttpStatusCode.OK, "123");
            Assert.Equal(123, res);
        }

        [Fact]
        public void Handle_NonSuccess_WithBody_ThrowsExceptionContainingBody()
        {
            var handler = CreateHandler();
            var ex = Assert.Throws<Exception>(() => handler.Handle<string>(HttpStatusCode.InternalServerError, "boom"));
            Assert.Contains("boom", ex.Message);
        }

        [Fact]
        public void Handle_NonSuccess_WithoutBody_ThrowsHttpRequestException()
        {
            var handler = CreateHandler();
            Assert.Throws<HttpRequestException>(() => handler.Handle<string>(HttpStatusCode.NotFound, string.Empty));
        }
    }
}

